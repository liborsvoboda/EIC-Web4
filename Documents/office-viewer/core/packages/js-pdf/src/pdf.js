export const pdfLibJsStr = '';