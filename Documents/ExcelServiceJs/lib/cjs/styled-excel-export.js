'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable consistent-return */
/* eslint-disable no-plusplus */
/* eslint-disable no-bitwise */


var _xlsxStyles = require('xlsx-styles');

var _xlsxStyles2 = _interopRequireDefault(_xlsxStyles);

var _fileSaver = require('file-saver');

var _fileSaver2 = _interopRequireDefault(_fileSaver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var writeOptions = {
  type: 'binary',
  bookSST: false,
  bookType: 'xlsx',
  showGridLines: false
};

var EXCEL_MAX_ROW_COUNT = 1048576;
var EXCEL_MAX_COL_COUNT = 16384;

// https://www.npmjs.com/package/xlsx-styles#cell-styles
var borderStyle = { style: 'thin', color: { rgb: 'CCCCCC' } };
var border = {
  border: {
    top: borderStyle,
    bottom: borderStyle,
    left: borderStyle,
    right: borderStyle
  }
};

var createColumnTitles = function createColumnTitles() {
  var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var colOffset = arguments[1];
  var headerStyle = arguments[2];
  var noBorders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var cells = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var rowIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  var row = [];
  columns.forEach(function (column, colIndex) {
    var cellIndex = colOffset + colIndex;
    if (Array.isArray(column)) {
      return createColumnTitles(column, colOffset, headerStyle, noBorders, cells, colIndex);
    }
    var cellValue = (column || {}).header || '';
    var cell = { v: cellValue, t: 's', s: headerStyle };
    if (!noBorders) {
      cell.s = _extends({}, cell.s, border);
    }
    var cellRef = _xlsxStyles2.default.utils.encode_cell({ c: cellIndex, r: rowIndex });
    var cellData = { cell: cell, cellRef: cellRef };
    if (column && column.merge > 1) {
      cellData.merge = {
        s: {
          c: cellIndex,
          r: rowIndex
        },
        e: {
          c: cellIndex + (column.merge - 1),
          r: rowIndex
        }
      };
    }
    var upperCell = rowIndex > 0 ? cells[rowIndex - 1][colIndex] : undefined;
    if (column && column.valueKeyPath) {
      cellData.valueKeyPath = column.valueKeyPath;
      cellData.valueRender = column.valueRender;
      cellData.disableValueRenderInExcel = column.disableValueRenderInExcel;
      if (column.valueOptions && column.valueOptions.multiplier) {
        cellData.multiplier = column.valueOptions.multiplier;
      }
    } else if (rowIndex > 0) {
      cellData.valueKeyPath = upperCell.valueKeyPath;
    }
    var wch = upperCell && !upperCell.merge && upperCell.wch > cellValue.length ? upperCell.wch : cellValue.length;
    cellData.wch = wch;
    row.push(cellData);
  });
  if (row.length > 0) {
    cells.push(row);
  }
  return cells;
};

var createDataSheet = function createDataSheet(exportData) {
  var columns = exportData.columns,
      _exportData$data = exportData.data,
      data = _exportData$data === undefined ? [] : _exportData$data,
      dataStyle = exportData.dataStyle,
      formatter = exportData.formatter,
      headerStyle = exportData.headerStyle,
      noBorders = exportData.noBorders,
      rows = exportData.rows;

  var worksheet = {};
  var colOffset = rows && rows.length > 0 ? 1 : 0;
  var columnTitles = createColumnTitles(columns, colOffset, headerStyle, noBorders);
  var rowOffset = columnTitles.length;

  var merges = [];
  if (rows && rows.length > 0 && rowOffset > 1) {
    merges.push({ s: { c: 0, r: 0 }, e: { c: 0, r: rowOffset - 1 } });
  }

  var cols = [];

  columnTitles.forEach(function (columnRow) {
    return columnRow.forEach(function (columnTitle, colIndex) {
      worksheet[columnTitle.cellRef] = columnTitle.cell;
      if (columnTitle.merge) {
        merges.push(columnTitle.merge);
      }
      cols[colIndex] = { wch: columnTitle.wch };
    });
  });

  if (rows) {
    var wch = 0;
    rows.forEach(function (row, rowIndex) {
      var cellRowIndex = rowIndex + rowOffset;
      var cellRef = _xlsxStyles2.default.utils.encode_cell({ c: 0, r: cellRowIndex });
      var title = row.header;
      var width = title ? title.length : 0;
      wch = wch < width ? width : wch;
      var cell = { v: title, t: 's', s: headerStyle };
      if (!noBorders) {
        cell.s = _extends({}, cell.s, border);
      }
      worksheet[cellRef] = cell;
    });
    cols.unshift({ wch: wch });
  }
  worksheet['!cols'] = cols;
  worksheet['!merges'] = merges;

  var createCell = function createCell(value, colIndex, rowIndex) {
    var cellRowIndex = rowIndex + rowOffset;
    var cellColIndex = colIndex + colOffset;
    var cell = { v: value, s: dataStyle };
    if (!noBorders) {
      cell.s = _extends({}, cell.s, border);
    }
    var cellRef = _xlsxStyles2.default.utils.encode_cell({ c: cellColIndex, r: cellRowIndex });
    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
      case 'number':
        {
          cell.t = 'n';
          break;
        }
      case 'boolean':
        {
          cell.t = 'b';
          break;
        }
      default:
        {
          cell.t = 's';
          cell.z = '@';
          break;
        }
    }
    worksheet[cellRef] = cell;
  };

  var formatCell = function formatCell(value, column, row) {
    var disableValueRenderInExcel = column.disableValueRenderInExcel,
        multiplier = column.multiplier,
        valueRender = column.valueRender;

    var cellValue = multiplier && typeof value === 'number' ? multiplier * value : value;
    if (valueRender && !disableValueRenderInExcel) {
      cellValue = valueRender(row);
    } else if (formatter) {
      cellValue = formatter(cellValue);
    }
    return cellValue;
  };

  var detailedColumns = columnTitles.length > 0 ? columnTitles[rowOffset - 1] : [];
  var endColumnIndex = 0;
  if (detailedColumns.length > 0) {
    data.forEach(function (row, rowIndex) {
      detailedColumns.forEach(function (column, colIndex) {
        var cellValue = formatCell(row.getIn ? row.getIn(column.valueKeyPath) : row[column.valueKeyPath], column, row);
        createCell(cellValue, colIndex, rowIndex);
      });
    });
    endColumnIndex = detailedColumns.length + colOffset;
  } else {
    data.forEach(function (row, rowIndex) {
      row.forEach(function (column, colIndex) {
        var cellValue = formatCell(column.value, column, row);
        createCell(cellValue, colIndex, rowIndex);
        var currentColIndex = colIndex + colOffset;
        endColumnIndex = endColumnIndex < currentColIndex ? currentColIndex : endColumnIndex;
        cols.push({ wch: 50 });
      });
    });
  }
  var endRowIndex = (data.length || data.size) + rowOffset;
  var range = {
    s: {
      c: 0,
      r: 0
    },
    e: {
      c: endColumnIndex,
      r: endRowIndex
    }
  };
  if (range.e.c < EXCEL_MAX_COL_COUNT && range.e.r < EXCEL_MAX_ROW_COUNT) {
    worksheet['!ref'] = _xlsxStyles2.default.utils.encode_range(range);
  }

  return worksheet;
};

exports.default = function (sheets, fileName) {
  var workbook = { SheetNames: [], Sheets: {} };

  sheets.forEach(function (sheet, index) {
    var sheetName = sheet.name || 'Sheet ' + (index + 1);
    workbook.SheetNames.push(sheetName);
    var wsSheet = createDataSheet(sheet);
    workbook.Sheets[sheetName] = wsSheet;
  });

  var wbout = _xlsxStyles2.default.write(workbook, writeOptions);
  function s2ab(s) {
    var buf = new ArrayBuffer(s.length);
    var view = new Uint8Array(buf);
    for (var i = 0; i !== s.length; ++i) {
      view[i] = s.charCodeAt(i) & 0xFF;
    }
    return buf;
  }

  /* the saveAs call downloads a file on the local machine */
  (0, _fileSaver2.default)(new Blob([s2ab(wbout)], { type: '' }), fileName + '.xlsx');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,